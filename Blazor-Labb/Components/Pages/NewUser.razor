@page "/newuser"
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer

<div id="new-user-page">
	<h1 id="page-title">@_title</h1>

	@if (_formNotDone)
	{
		<div id="form-container">
			<EditForm Model="_user" OnValidSubmit="AddUser">
				<DataAnnotationsValidator />
				<div id="first-name-container" class="form-input">
					<label for="first-name" id="first-name-label">First Name</label>
					<InputText id="first-name" @bind-Value="_user.FirstName"/>
					<ValidationMessage For="() => _user.FirstName" />
				</div>

				<div id="last-name-container" class="form-input">
					<label for="last-name" id="last-name-label">Last Name</label>
					<InputText id="last-name" @bind-Value="_user.LastName"/>
					<ValidationMessage For="() => _user.LastName"/>
				</div>

				<div id="email-container" class="form-input">
					<label for="email" id="email-label">Email</label>
					<InputText id="email" @bind-Value="_user.Email"/>
					<ValidationMessage  For="() => _user.Email"/>
				</div>

				<div id="age-container" class="form-input">
					<label for="age" id="phonelabel">Age</label>
					<InputNumber id="age" @bind-Value="_user.Age" />
					<ValidationMessage For="() => _user.Age" />
				</div>

				<button type="submit" id="form-btn">Submit</button>
			</EditForm>
		</div>
	}
	else
	{
		<div id="form-result-container">
			<p class="result">First Name: @_user.FirstName</p>
			<p class="result">Last Name: @_user.LastName</p>
			<p class="result">Email: @_user.Email</p>
			<p class="result">Age: @_user.Age</p>
			<button id="new-user-btn" @onclick="AddNewUser">New User</button>
		</div>
	}
</div>

@code 
{
	private User _user = new User();
	private string _title = "Add a new user";
	private bool _formNotDone = true;
	private string _emailRegex = @"^[a-zA-Z0-9._%+-]{3,}@[a-zA-Z0-9.-]{3,}\.[a-zA-Z]{2,3}$";

	public class User
	{
		[Required]
		[RegularExpression(@"^[a-zA-Z]+(-[a-zA-Z]+)*$", ErrorMessage = "First name contains invalid characters")]
		public string? FirstName { get; set; }
		[Required]
		[RegularExpression(@"^[a-zA-Z]+(-[a-zA-Z]+)*$", ErrorMessage = "Last name contains invalid characters")]
		public string? LastName { get; set; }
		[Required]
		[RegularExpression(@"^[a-zA-Z0-9._%+-]{3,}@[a-zA-Z0-9.-]{3,}\.[a-zA-Z]{2,3}$", ErrorMessage = "Incorrect Email.")]
		public string? Email { get; set; }
		[Range(18, 65)] public int Age { get; set; }
	}

	public void AddUser()
	{
		_formNotDone = false;
		_title = "Form submitted!";
	}

	public void AddNewUser()
	{
		_formNotDone = true;
		_title = "Add a new user";
		_user.FirstName = "";
		_user.LastName = "";
		_user.Email = "";
		_user.Age = 0;
	}
}

<style>

	#new-user-btn {
		justify-self: center;
		width: 130px;
		height: 40px;
		border: none;
		border-radius: 20px;
		background: purple;
		color: white;
		font-weight: bold;
		margin-top: 20px;
	}

	#new-user-btn:hover {
			width: 135px;
			height: 42px;
	}

	.result {
		font-size: 22px;
	}
	#form-result-container {
		display: flex;
		flex-direction: column;
		align-items:center;
		margin-top: 50px;
	}

	#new-user-page {
		display: grid;
		grid-template-rows: 1fr 5fr;
	}

	#page-title {
		justify-self: center;
		font-family: 'Times New Roman', Times, serif;
		font-weight: bold;
		font-size: 62px;
		justify-self: center;
		align-self: center;
	}

	#form-container {
		display: flex;
		justify-content: center;

	}
	.form-input{
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
	}

	.form-input {
		margin: 20px;
	}

	#form-btn {
		justify-self: center;
		margin-left: 65px;
		width: 120px;
		height: 40px;
		border: none;
		border-radius: 20px;
		background: limegreen;
		color: white;
		font-weight: bold;
	}

	#form-btn:hover {
		width: 125px;
		height: 41px;
	}

	label {
		font-size: 18px;
		font-weight: bold;
	}
</style>
