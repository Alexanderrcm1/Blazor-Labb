@page "/users"
@using System.Text.Json
@using Microsoft.AspNetCore.Mvc.Rendering
@rendermode InteractiveServer

<div id="users-page">
	<h1>Users</h1>
	<div id="table-container">
		@if (users == null || !users.Any())
		{
			<p>Loading...</p>
		}
		else
		{
			<button id ="amount-btn" @onclick="showAmount">@amountBtn</button>
			<button id ="name-sort-btn" @onclick="nameSort">@nameSortBtn</button>
			<table>
				<tr>
					<th>ID</th>
					<th>Name</th>
					<th>Email</th>
					<th>Adress</th>
					<th>Company</th>

				</tr>
				@foreach (var user in users)
				{
					<tr>
						<td>@user.Id</td>
						<td>@user.Name</td>
						<td>@user.Email</td>
						<td>@user.Address.Street<br /> @user.Address.City, @user.Address.Zipcode </td>
						<td>@user.Company.Name - <em>"@user.Company.Catchphrase"</em></td>
					</tr>
				}
			</table>
		}
	</div>
</div>

@code {

	public void nameSort()
	{
		nameSortIsDescending = !nameSortIsDescending;

		if (nameSortIsDescending)
		{
			users = users.SortOnName();
		}
		else
		{
			users = users.SortOnNameDesc();
		}

		StateHasChanged();
	}

	public async Task showAmount()
	{
		showingAll = !showingAll;

		if (showingAll)
		{
			users = await users.ShowAll();
			amountBtn = "Show 5";
		}
		else
		{
			users =  users.ShowFew();
			amountBtn = "Show All";
		}

		StateHasChanged();
	}

	List<IUser> users;
	bool showingAll = false;
	bool nameSortIsDescending = false;
	string amountBtn = "Show All";
	string nameSortBtn = "Sort On Name";

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(2000);
		IUser newUser = new MyUser();
		users = await newUser.GetUsersAsync();
		users = users.ShowFew();
	}

	public interface IUser
	{
		public string Name { get; set; }
		public string Email { get; set; }
		public int Id { get; set; }
		public Address Address { get; set; }
		public Company Company { get; set; }

		Task<List<IUser>> GetUsersAsync();
	}

	public class ApiUser : IUser
	{
		string jsonString;

		public string Name { get; set; }
		public string Email { get; set; }
		public int Id { get; set; }
		public Address Address { get; set; }
		public Company Company { get; set; }


		public ApiUser()
		{
			Address = new Address();
			Company = new Company();
		}

		public async Task<List<IUser>> GetUsersAsync()
		{
			List<IUser> users = new List<IUser>();
			await CreateUserListAsync(users);
			return users;
		}

		public async Task CreateUserListAsync(List<IUser> users)
		{
			jsonString = await GetJson();
			var apiUsers = JsonSerializer.Deserialize<List<ApiUser>>(jsonString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
			users.AddRange(apiUsers);
		}

		public async Task<string> GetJson()
		{
			string url = "https://jsonplaceholder.typicode.com/users";
			using HttpClient client = new HttpClient();
			jsonString = await client.GetStringAsync(url);

			Console.WriteLine(jsonString);
			return jsonString;
		}

	}

	public class MyUser : IUser
	{
		public string Name { get; set; }
		public string Email { get; set; }
		public int Id { get; set; }
		public Address Address { get; set; }
		public Company Company { get; set; }

		public MyUser()
		{
			Address = new Address();
			Company = new Company();
		}
		public async Task<List<IUser>> GetUsersAsync()
		{
			List<IUser> users = new List<IUser>();
			CreateUserList(users);
			return users;
		}

		public void CreateUserList(List<IUser> users)
		{

			string[] names =
			{
				"Alexander Hansson", "Emma Carlsson", "Olivia Jonsson", "Elias Svensson", "Noah Eriksson", "Ava Avasson", "Jonas Jonasson", "Bengt Bengtsson", "Charlie Charlsson", "Elsa Elsson", "Maja Majsson", "Gustav Gusson", "Karl Karlsson", "Erika Eriksson", "Hugo Hugsson"
	};

			string[] cities = {"Stockholm", "Göteborg", "Malmö"};
			string[] streets = {"Sveavägen", "Avenyn", "Kungsgatan"};
			string[] zipcodes = {"143 23", "103 43", "195 89"};
			string[] companys = {"Apple", "Microsoft", "Tesla"};
			string[] catchphrases = {"Think Different", "Empowering us all", "Accelerating the world's transition to sustainable energy"};

			for (int i = 0; i < 15; i++)
			{

				int index = i % cities.Length;

				MyUser user = new MyUser
					{
						 Name = names[i],
						 Id = i + 1,
						 Email = $"{names[i]}{i + 1}@{companys[index]}.com",
						Address = new Address() { City = cities[index], Street = streets[index], Zipcode = zipcodes[index] },
						Company = new Company() { Name = companys[index], Catchphrase = catchphrases[index] },
					};
				users.Add(user);
			}

		}
	}

}
<style>
	#users-page {
		display: flex;
		flex-direction: column;
	}
	
	#table-container {
		display: grid;
	}

	h1 {
		align-self: center;
		margin: 10px;
	}

	table, td, th {
		padding: 0 20px 0 20px;
	}

	tr {
		border: 1px solid black;
	}
</style>
